{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["stores","connection","close","ConnectionFactory","constructor","Error","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";;;;;;AAAA,YAAMA,SAAS,CAAC,aAAD,CAAf;AACA,UAAIC,aAAa,IAAjB;AACA,UAAIC,QAAQ,IAAZ;;AAEO,YAAMC,iBAAN,CAAwB;;AAE7BC,sBAAc;;AAEZ,gBAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,eAAOC,aAAP,GAAuB;;AAErB,iBAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAEtC,gBAAIR,UAAJ,EAAgB,OAAOO,QAAQP,UAAR,CAAP;;AAEhB,kBAAMS,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;;AAEAF,wBAAYG,eAAZ,GAA8BC,KAAK;;AAEjCX,gCAAkBY,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AAED,aAJD;;AAMAP,wBAAYQ,SAAZ,GAAwBJ,KAAK;;AAE3Bb,2BAAaa,EAAEE,MAAF,CAASC,MAAtB;;AAEAf,sBAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;;AAEAA,yBAAWC,KAAX,GAAmB,MAAM;AACvB,sBAAM,IAAIG,KAAJ,CAAU,4CAAV,CAAN;AACD,eAFD;;AAIAG,sBAAQM,EAAEE,MAAF,CAASC,MAAjB;AAED,aAZD;;AAcAP,wBAAYU,OAAZ,GAAsBN,KAAK;;AAEzBO,sBAAQC,GAAR,CAAYR,EAAEE,MAAF,CAASO,KAArB;AACAd,qBAAOK,EAAEE,MAAF,CAASO,KAAT,CAAeC,IAAtB;AAED,aALD;AAOD,WAjCM,CAAP;AAkCD;;AAED,eAAOT,aAAP,CAAqBd,UAArB,EAAiC;;AAE/BD,iBAAOyB,OAAP,CAAeC,SAAS;;AAEtB,gBAAIzB,WAAW0B,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EACEzB,WAAW4B,iBAAX,CAA6BH,KAA7B;;AAEFzB,uBAAW6B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACD,WAND;AAOD;;AAED,eAAOC,eAAP,GAAyB;;AAEvB,cAAI/B,UAAJ,EAAgB;AACdC;AACD;AACF;AA7D4B","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n\r\n  constructor() {\r\n\r\n    throw new Error('Não é possível criar instâncias dessa classe');\r\n  }\r\n\r\n  static getConnection() {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      if (connection) return resolve(connection);\r\n\r\n      const openRequest = indexedDB.open('jscangaceiro', 2);\r\n\r\n      openRequest.onupgradeneeded = e => {\r\n\r\n        ConnectionFactory._createStores(e.target.result);\r\n\r\n      };\r\n\r\n      openRequest.onsuccess = e => {\r\n\r\n        connection = e.target.result;\r\n\r\n        close = connection.close.bind(connection);\r\n\r\n        connection.close = () => {\r\n          throw new Error('Você não pode fechar diretamente a conexão');\r\n        };\r\n\r\n        resolve(e.target.result);\r\n\r\n      };\r\n\r\n      openRequest.onerror = e => {\r\n\r\n        console.log(e.target.error)\r\n        reject(e.target.error.name)\r\n\r\n      };\r\n\r\n    });\r\n  }\r\n\r\n  static _createStores(connection) {\r\n\r\n    stores.forEach(store => {\r\n\r\n      if (connection.objectStoreNames.contains(store))\r\n        connection.deleteObjectStore(store);\r\n\r\n      connection.createObjectStore(store, { autoIncrement: true });\r\n    });\r\n  }\r\n\r\n  static closeConnection() {\r\n\r\n    if (connection) {\r\n      close();\r\n    }\r\n  }\r\n}\r\n"]}